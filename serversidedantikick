local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local GuiService = game:GetService("GuiService")
local NetworkClient = game:GetService("NetworkClient")
local CoreGui = game:GetService("CoreGui")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")
local ScriptContext = game:GetService("ScriptContext")

local BetterLc = true
local FFTime = true
local NetworkPeer = false
local NetworkServer = false
local NetworkReplicator = false
local Respawn = false
local LoadCharacter = true
local cim = false
local forcecf = false
local fixedtool = false
local inventoryfix = false
local experimental = false
local NetworkFixer = false

cloneref = cloneref or function(x) return x end
OldClientReplicatorInstance = game.NetworkClient.ClientReplicator

function NetworkPeer()
    task.spawn(function()
        local OldNameCall = nil
        OldNameCall = hookmetamethod(game, "__namecall", function(Self, ...)
            local Args = {...}
            local NamecallMethod = getnamecallmethod()
            if not checkcaller() and Self == game and NamecallMethod == "GetService" and Args[1] == 'NetworkPeer' then
                return game.NetworkClient
            end
            return OldNameCall(Self, ...)
        end)
    end)
    
    task.spawn(function()
        local OldIndex = nil
        OldIndex = hookmetamethod(game, "__index", function(Self, Key)
            if not checkcaller() and Self == game and Key == 'NetworkPeer' then
                return game.NetworkClient
            end
            return OldIndex(Self, Key)
        end)
    end)
end

function MakeService(x)
    local ser = {}
    ser.Name = x
    ser.Parent = game
    ser.ClassName = x
    ser.Texture = "http://www.roblox.com/asset/?id=17741196734"
    
    function ser:Clone()
        return nil
    end
    
    function ser:Destroy()
        error('The parent property of this instance is locked')
    end
    
    task.spawn(function()
        local OldNameCall = nil
        OldNameCall = hookmetamethod(game, "__namecall", function(Self, ...)
            local Args = {...}
            local NamecallMethod = getnamecallmethod()
            if not checkcaller() and Self == game and NamecallMethod == "GetService" and Args[1] == x then
                return ser
            end
            return OldNameCall(Self, ...)
        end)
    end)
    
    task.spawn(function()
        local OldIndex = nil
        OldIndex = hookmetamethod(game, "__index", function(Self, Key)
            if not checkcaller() and Self == game and Key == x then
                return ser
            end
            return OldIndex(Self, Key)
        end)
    end)
    
    return ser
end

function MakeReplicator(x, y)
    x[y] = {}
    x[y].Name = y
    x[y].ClassName = y
    x[y].Parent = x
    x[y].Texture = 'http://www.roblox.com/asset/?id=17741561061'
    local bomb = x[y]
    
    function bomb:GetPlayer()
        return game.Players.LocalPlayer
    end
end

if NetworkPeer == true then
    NetworkPeer()
end

if NetworkServer == true then
    local ns = MakeService('NetworkService')
    MakeReplicator(ns, 'ServerReplicator')
end

if NetworkReplicator == true then
    local nr = MakeService('NetworkReplicator')
    function nr:GetPlayer()
        return game.Players.LocalPlayer
    end
end

local RealOldPlayer = game.Players.LocalPlayer
local OldPlayer = Instance.new('Folder')
UserId = game.Players.LocalPlayer.UserId
Name = game.Players.LocalPlayer.Name
DName = game.Players.LocalPlayer.DisplayName
Cai = game.Players.LocalPlayer.CharacterAppearanceId
repc = game.Players.LocalPlayer.Character
oldmb = game.Players.LocalPlayer.MembershipType
underage = game.Players.LocalPlayer:GetUnder13()

for i, v in pairs(game.Players.LocalPlayer:GetChildren()) do
    pcall(function()
        v:Clone().Parent = OldPlayer
    end)
end

Guis = Instance.new('Folder')
Guis.Name = 'PlayerGui'

for i, v in pairs(game.Players.LocalPlayer.PlayerGui:GetChildren()) do
    v:Clone().Parent = Guis
end

tablep = game:HttpGet('https://raw.githubusercontent.com/phareignxd/xemonassests/refs/heads/main/tablepropertiesantikick')
Properties = loadstring(tablep)()

function spc(x, y)
    for i, v in pairs(Properties) do
        task.wait()
        pcall(function()
            x[i] = y[i]
        end)
    end
end

function SuperClone(x)
    local new = Instance.new(x.ClassName)
    spc(new, x)
    for i, v in pairs(x:GetChildren()) do
        pcall(function()
            v:Clone().Parent = new
        end)
    end
end

function MoveTo(x)
    for i, v in pairs(OldPlayer:GetChildren()) do
        if BetterLc == false then
            v.Parent = x
        else
            if v.Name ~= 'Backpack' then
                v.Parent = x
            end
        end
    end
    Guis.Parent = game.CoreGui
end

function AntiConsoleLag()
    if experimental == true then
        pcall(function()
            while task.wait() do
                game:FindService('LogService'):ClearOutput()
            end
        end)
    end
end

function DisableCustomConsole()
    pcall(function()
        for i, v in pairs(getconnections(game:FindService('LogService').MessageOut)) do
            v:Disable()
        end
    end)
end

function Player()
    if BetterLc == false then
        local d = Instance.new('Player')
        spc(d, game.Players.LocalPlayer)
        d.UserId = UserId
        d.Name = Name
        d.DisplayName = DName
        d.CharacterAppearanceId = Cai
        d.Character = repc
        d.Parent = game.Players
        MoveTo(d)
        
        task.spawn(function()
            local OldIndex = nil
            OldIndex = hookmetamethod(game.Players, "__index", function(Self, Key)
                if not checkcaller() and Self == game.Players and Key == "LocalPlayer" then
                    return d
                end
                return OldIndex(Self, Key)
            end)
        end)
        
        task.spawn(function()
            DisableCustomConsole()
            AntiConsoleLag()
        end)
    elseif BetterLc == true then
        game.Players:ResetLocalPlayer()
        local d = game.Players:CreateLocalPlayer()
        game.Players:SetLocalPlayerInfo(UserId, Name, DName, oldmb, underage)
        d.CharacterAppearanceId = Cai
        d.Character = repc
        MoveTo(d)
        d.Parent = game.Players
    end
    return d
end

function streamingenabled()
    task.spawn(function()
        while task.wait() do
            workspace.StreamingEnabled = true
        end
    end)
end

if experimental == true then
    local sets = settings()
    local netw = sets.Network
    streamingenabled()
    netw.RenderStreamedRegions = true
    netw.RandomizeJoinInstanceOrder = true
    netw.ShowActiveAnimationAsset = true
    netw.PrintPhysicsErrors = true
    
    game.DescendantRemoving:Connect(function(x)
        print(x:GetFullName())
        local clone = x:Clone()
        if clone ~= nil then
            clone.Parent = x.Parent
        end
    end)
end

function rep()
    pcall(function()
        local scriptContext = game:GetService("ScriptContext")
        local touchEnabled = game:GetService("UserInputService").TouchEnabled
        local RobloxGui = game:GetService("CoreGui"):WaitForChild("RobloxGui")
        local soundFolder = Instance.new("Folder")
        soundFolder.Name = "Sounds"
        soundFolder.Parent = RobloxGui

        local function safeRequire(moduleScript)
            local moduleReturnValue = nil
            local success, err = pcall(function() moduleReturnValue = require(moduleScript) end)
            if not success then
                warn("Failure to Start CoreScript module" ..moduleScript.Name.. ".\n" ..err)
            end
            return moduleReturnValue
        end

        scriptContext:AddCoreScriptLocal("CoreScripts/Topbar", RobloxGui)
        scriptContext:AddCoreScriptLocal("CoreScripts/MainBotChatScript2", RobloxGui)
        scriptContext:AddCoreScriptLocal("CoreScripts/NotificationScript2", RobloxGui)
        scriptContext:AddCoreScriptLocal("CoreScripts/PerformanceStatsManagerScript", RobloxGui)

        spawn(function() safeRequire(RobloxGui.Modules.ChatSelector) end)
        spawn(function() safeRequire(RobloxGui.Modules.PlayerlistModule) end)

        scriptContext:AddCoreScriptLocal("CoreScripts/PurchasePromptScript2", RobloxGui)
        scriptContext:AddCoreScriptLocal("CoreScripts/BlockPlayerPrompt", RobloxGui)
        scriptContext:AddCoreScriptLocal("CoreScripts/FriendPlayerPrompt", RobloxGui)
        scriptContext:AddCoreScriptLocal("CoreScripts/AvatarContextMenu", RobloxGui)

        spawn(function() safeRequire(RobloxGui.Modules.BackpackScript) end)

        scriptContext:AddCoreScriptLocal("CoreScripts/VehicleHud", RobloxGui)
        scriptContext:AddCoreScriptLocal("CoreScripts/GamepadMenu", RobloxGui)

        if touchEnabled then
            scriptContext:AddCoreScriptLocal("CoreScripts/ContextActionTouch", RobloxGui)
            RobloxGui:WaitForChild("ControlFrame")
            RobloxGui.ControlFrame:WaitForChild("BottomLeftControl")
            RobloxGui.ControlFrame.BottomLeftControl.Visible = false
        end

        spawn(function()
            local VRService = game:GetService('VRService')
            local function onVREnabledChanged()
                if VRService.VREnabled then
                    safeRequire(RobloxGui.Modules.VR.VirtualKeyboard)
                    safeRequire(RobloxGui.Modules.VR.UserGui)
                end
            end
            onVREnabledChanged()
            VRService:GetPropertyChangedSignal("VREnabled"):connect(onVREnabledChanged)
        end)

        if UserSettings().GameSettings:InStudioMode() then
            local VRService = game:GetService('VRService')
            local function onVREnabledChanged()
                if VRService.VREnabled then
                    local shellInVRSuccess, shellInVRFlagValue = pcall(function() return settings():GetFFlag("EnabledAppShell3D") end)
                    local shellInVR = (shellInVRSuccess and shellInVRFlagValue == true)
                    local modulesFolder = RobloxGui.Modules
                    local appHomeModule = modulesFolder:FindFirstChild('Shell') and modulesFolder:FindFirstChild('Shell'):FindFirstChild('AppHome')
                    if shellInVR and appHomeModule then
                        safeRequire(appHomeModule)
                    end
                end
            end

            spawn(function()
                if VRService.VREnabled then
                    onVREnabledChanged()
                end
                VRService:GetPropertyChangedSignal("VREnabled"):connect(onVREnabledChanged)
            end)
        end
    end)
end

e = Instance.new('Folder')
e.Name = 'PlayerScripts'

for i, v in pairs(game.Players.LocalPlayer.PlayerScripts:GetChildren()) do
    v.Archivable = true
    v:Clone().Parent = e
end

oldchar = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
old = oldchar.PrimaryPart.CFrame

function cleartools()
    for i, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
        if v:IsA('Tool') then v:Destroy() end
    end
    for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
        if v:IsA('Tool') then v:Destroy() end
    end
end

function bringtools()
    local sp = game.Players.LocalPlayer.StarterGear
    for i, v in pairs(sp:GetChildren()) do
        if v:IsA'Tool' then
            v:Clone().Parent = game.Players.LocalPlayer.Backpack
        end
    end
end

function fixtools(y)
    cleartools()
    bringtools()
    for i, v in pairs(y:GetChildren()) do
        if v:IsA'Tool' then
            v.Parent = game.Players.LocalPlayer.Backpack
        end
    end
end

local function p()
    task.defer(function()
        for i, v in pairs(e:GetDescendants()) do
            if v:IsA 'LocalScript' then
                v.Disabled = false
            end
            e.Parent = game.Players.LocalPlayer.Character
        end
    end)
    
    task.defer(function()
        while task.wait() do
            GuiService:ClearError()
        end
    end)

    local Player = Players.LocalPlayer
    local RealCharacter = Player.Character or Player.CharacterAdded:Wait()
    RealCharacter.Archivable = true
    local FakeCharacter = RealCharacter:Clone()
    local Part = Instance.new("Part", workspace)
    Part.Anchored = true
    Part.Size = Vector3.new(200, 1, 200)
    Part.CFrame = CFrame.new(0, -500, 0)
    Part.CanCollide = true
    FakeCharacter.Parent = workspace
    FakeCharacter.HumanoidRootPart.CFrame = Part.CFrame * CFrame.new(0, 5, 0)

    for i, v in pairs(RealCharacter:GetChildren()) do
        if v:IsA("LocalScript") then
            local clone = v:Clone()
            clone.Disabled = true
            clone.Parent = FakeCharacter
        end
    end
    
    for i, v in pairs(RealCharacter.PrimaryPart:GetChildren()) do
        if v:IsA("Sound") then
            v.Archivable = true
            v:Clone().Parent = FakeCharacter
        end
    end
    
    local PseudoAnchor
    RunService.RenderStepped:Connect(function()
        if PseudoAnchor ~= nil then
            PseudoAnchor.CFrame = Part.CFrame * CFrame.new(0, 5, 0)
        end
    end)

    PseudoAnchor = FakeCharacter.HumanoidRootPart

    local function Invisible()
        local StoredCF = RealCharacter.HumanoidRootPart.CFrame
        RealCharacter.HumanoidRootPart.CFrame = FakeCharacter.HumanoidRootPart.CFrame
        FakeCharacter.HumanoidRootPart.CFrame = StoredCF
        FakeCharacter:WaitForChild("Humanoid").DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None
        Player.Character = FakeCharacter
        if fixedtool == true then
            fixtools(RealCharacter)
        end
        FakeCharacter.Humanoid.Health = FakeCharacter.Humanoid.MaxHealth
        workspace.CurrentCamera.CameraSubject = FakeCharacter.Humanoid
        PseudoAnchor = RealCharacter.HumanoidRootPart
        for i, v in pairs(FakeCharacter:GetChildren()) do
            if v:IsA("LocalScript") then
                v.Disabled = false
            end
        end
    end

    Invisible()
    return FakeCharacter
end

repeat wait() until (not NetworkClient:FindFirstChild('ClientReplicator'))

task.spawn(function()
    if game.Players:FindFirstChild(game.Players.LocalPlayer.Name) == nil then
        Player()
    end
end)

if LoadCharacter == true then
    task.spawn(function()
        local OldNamecall
        OldNamecall = hookmetamethod(game.Players.LocalPlayer, "__namecall", newcclosure(function(self, ...)
            local g = getnamecallmethod()
            if g == 'LoadCharacter' then 
                cleartools() 
                return p()
            end
            return OldNamecall(self, ...)
        end))
    end)
end

if cim == true then
    task.spawn(function()
        while task.wait() do
            GuiService:CloseInspectMenu()
        end
    end)
end

task.defer(function()
    for i, v in pairs(e:GetDescendants()) do
        if v:IsA 'LocalScript' then
            v.Disabled = false
        end
        e.Parent = game.Players.LocalPlayer.Character
    end
end)

task.defer(function()
    while task.wait() do
        GuiService:ClearError()
    end
end)

rep()

if NetworkFixer ~= true then
    task.spawn(function()
        local function setupClientReplicator()
            local ClientReplicator = Instance.new('RemoteEvent')
            ClientReplicator.Parent = NetworkClient
            ClientReplicator.Name = 'ClientReplicator'

            local OldNamecall
            OldNamecall = hookmetamethod(ClientReplicator, "__namecall", newcclosure(function(self, ...)
                local g = getnamecallmethod()
                if g == 'GetPlayer' then
                    return Players.LocalPlayer
                end
                return OldNamecall(self, ...)
            end))

            local OldIndex = nil
            OldIndex = hookmetamethod(game, "__index", function(Self, Key)
                if not checkcaller() and Self == ClientReplicator and Key == "ClassName" then
                    return 'ClientReplicator'
                end
                return OldIndex(Self, Key)
            end)
        end

        setupClientReplicator()
    end)
else
    task.spawn(function()
        local OldIndex = nil
        OldIndex = hookmetamethod(NetworkClient, "__index", function(Self, Key)
            if not checkcaller() and Self == NetworkClient and Key == "ClientReplicator" then
                return OldClientReplicatorInstance
            end
            return OldIndex(Self, Key)
        end)
    end)
    DisableCustomConsole()
end

local Player = Players.LocalPlayer
Sp = Player.RespawnLocation
pcall(function()
    Sp.CanCollide = false
end)

local RealCharacter = Player.Character or Player.CharacterAdded:Wait()
local IsInvisible = false
RealCharacter.Archivable = true
local FakeCharacter = RealCharacter:Clone()
local Part = Instance.new("Part", workspace)
Part.Anchored = true
Part.Size = Vector3.new(200, 1, 200)
Part.CFrame = CFrame.new(0, -500, 0)
Part.CanCollide = true
FakeCharacter.Parent = workspace
FakeCharacter.HumanoidRootPart.CFrame = Part.CFrame * CFrame.new(0, 5, 0)

for i, v in pairs(RealCharacter:GetChildren()) do
    if v:IsA("LocalScript") then
        local clone = v:Clone()
        clone.Disabled = true
        clone.Parent = FakeCharacter
    end
end

for i, v in pairs(RealCharacter.PrimaryPart:GetChildren()) do
    if v:IsA("Sound") then
        v.Archivable = true
        v:Clone().Parent = FakeCharacter
    end
end

local CanInvis = true
local PseudoAnchor

RunService.RenderStepped:Connect(function()
    if PseudoAnchor ~= nil then
        PseudoAnchor.CFrame = Part.CFrame * CFrame.new(0, 5, 0)
    end
end)

PseudoAnchor = FakeCharacter.HumanoidRootPart

local function Invisible()
    local StoredCF = RealCharacter.HumanoidRootPart.CFrame
    RealCharacter.HumanoidRootPart.CFrame = FakeCharacter.HumanoidRootPart.CFrame
    FakeCharacter.HumanoidRootPart.CFrame = StoredCF
    FakeCharacter:WaitForChild("Humanoid").DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None
    Player.Character = FakeCharacter
    if fixedtool == true then
        fixtools(RealCharacter)
    end
    FakeCharacter.Humanoid.Health = FakeCharacter.Humanoid.MaxHealth
    workspace.CurrentCamera.CameraSubject = FakeCharacter.Humanoid
    PseudoAnchor = RealCharacter.HumanoidRootPart
    for i, v in pairs(FakeCharacter:GetChildren()) do
        if v:IsA("LocalScript") then
            v.Disabled = false
        end
    end
    RealCharacter:Destroy()
end

died = false

function ff(x)
    local f = Instance.new('ForceField')
    f.Parent = x
    if FFTime == false then
        wait(10)
    elseif FFTime == true then
        if Sp ~= nil then
            if Sp.Duration > 0 then
                wait(Sp.Duration)
            end
        else
            wait(10)
        end
    end
    f:Destroy()
end

function c()
    if FakeCharacter.Humanoid.Health <= 0 and died == false then
        died = true
        if FakeCharacter.PrimaryPart:FindFirstChild('Died') then
            FakeCharacter.PrimaryPart.Died:Play()
        end
        
        if Respawn == true then
            wait(5)
        elseif Respawn == false then
            wait(tonumber(game.Players.RespawnTime))
        end
        
        if not Player.RespawnLocation == nil and forcecf == false then
            FakeCharacter:MoveTo(Player.RespawnLocation.Position)
        else
            FakeCharacter.PrimaryPart.CFrame = old
        end
        
        if inventoryfix == true then
            cleartools()
        end
        
        pcall(function()
            FakeCharacter.Humanoid:UnequipTools()
        end)
        
        e.Parent = ReplicatedStorage
        local fk = p()
        fk.Humanoid:UnequipTools()
        FakeCharacter:Remove()
        FakeCharacter = fk
        e.Parent = FakeCharacter
        ff(FakeCharacter)
        
        if inventoryfix == true then
            bringtools()
        end
        
        died = false
    end
end

Invisible()

while task.wait() do
    c()
end
